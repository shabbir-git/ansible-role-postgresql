---
# tasks file for postgresql

# repository
- block:
  - name: add official postgresql repository key
    apt_key:
      url: http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc
      state: present
    when: pg_repo == 'postgresql.org'

  - name: add official postgresql repository
    apt_repository:
      state: present
      repo: 'deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release}}-pgdg main {{ pg_version }}'
    when: pg_repo == 'postgresql.org'

  - name: make apt-cache up to date
    apt:
      update_cache: yes

  become: yes

# install
- block:
  - name: install pogresql server and client
    become: yes
    apt:
      pkg: "{{ item }}"
      state: latest
    with_items:
      - "postgresql-{{ pg_version }}"
      - "postgresql-client-{{ pg_version }}"
      - python-psycopg2
    register: db_setup
    tags: postgres_packages

  - name: install postgresql dev
    become: yes
    apt:
      name: "postgresql-server-dev-{{ pg_version }}"
      state: "{{ pg_dev_headers }}"

  - name: install postgresql contrib
    become: yes
    apt:
      name: "postgresql-contrib-{{ pg_version }}"
      state: "{{ pg_contrib }}"

# configure
- block:
  - name: update postgres client authentication config file
    template:
      src: pg_hba.conf.j2
      dest: '/etc/postgresql/{{ pg_version }}/main/pg_hba.conf'
      backup: yes
      owner: "{{ pg_admin_user }}"
      group: "{{ pg_admin_user }}"
      mode: 0644
    notify: restart postgresql
    tags: postgres_config

  - name: update postgres config file
    template:
      src: postgres.conf.j2
      dest: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
      backup: yes
      owner: "{{ pg_admin_user }}"
      group: "{{ pg_admin_user }}"
      mode: 0644
    notify: restart postgresql
    tags: postgres_config
  become: yes

# configure as postgres
- block:

  - name: create postgres database
    postgresql_db: "{{ item }}"
    with_items: "{{ pg_databases }}"
          # name: "{{ pg_dbname }}"
          # encoding: 'UTF-8'
          # template: 'template1'

  - name: create postgres user
    postgresql_user:
      user: "{{ item.user }}"
      password: "{{ item.password }}"
      role_attr_flags: "{{ item.role_attr_flags }}"
    with_items: "{{ pg_users }}"
      # db: "{{ pg_dbname }}"
      # name: "{{ pg_user }}"
      # password: "{{ pg_password }}"
      # state: present

  - name: install postgres extension(s)
    postgresql_ext:
      name: "{{ item }}"
      db: "{{ pg_dbname }}"
    with_items: "{{ pg_extensions }}"
    when: "{{ pg_extensions }}"

  become: yes
  become_user: postgres
